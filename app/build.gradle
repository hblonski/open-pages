apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: 'jacoco.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.hb.pages"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 17
        versionName "1.0.9-beta"

        testInstrumentationRunner "com.hb.pages.TestRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ['-Xopt-in=kotlin.ExperimentalStdlibApi']
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        coverage {
            testCoverageEnabled = true
            matchingFallbacks = ['debug']
            signingConfig signingConfigs.debug
            debuggable = true
        }
    }

    buildFeatures {
        viewBinding = true
    }

    testBuildType "coverage"

    testOptions {
        unitTests.includeAndroidResources = true
        animationsDisabled true
    }

    buildTypes.each {
        it.buildConfigField('String', 'googleBooksApiKey', getApiKey())
        it.buildConfigField('String', 'googleBooksApiUrl', "\"https://www.googleapis.com/books/v1/\"")
    }
}

static def getApiKey() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('keys.properties')))
    return props['googleBooksApiKey']
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin_version"
    implementation "androidx.appcompat:appcompat:$versions.androidx_appcompat"
    implementation "androidx.legacy:legacy-support-v4:$versions.androidx_legacy_support"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
    implementation "com.google.android.material:material:$versions.android_material"

    // Koin
    implementation "org.koin:koin-androidx-viewmodel:$versions.koin_version"
    implementation "org.koin:koin-androidx-ext:$versions.koin_version"

    // LiveData that triggers event only once
    implementation "com.github.hadilq.liveevent:liveevent:$versions.live_event"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okHttpLoggingInterceptor}"

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$versions.moshi"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.moshi_retrofit"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"

    // Extensions
    implementation "androidx.core:core-ktx:$versions.ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.view_model_ktx"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"

    // Lottie
    implementation "com.airbnb.android:lottie:$versions.lottie"

    // Threeten dates
    implementation "org.threeten:threetenbp:$versions.threeten"

    // Tests
    api "androidx.test.ext:junit:$versions.junit_ext"
    api "androidx.test.espresso:espresso-core:$versions.espresso"
    api "android.arch.core:core-testing:$versions.arch_core"
    api "androidx.test.espresso:espresso-intents:$versions.espresso"
    api "org.koin:koin-test:$versions.koin_version"
    api "com.squareup.okhttp3:mockwebserver:$versions.mock_web_server"
    api "androidx.test.uiautomator:uiautomator:$versions.ui_automator"
    testImplementation "junit:junit:$versions.junit"
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
}