apply plugin: 'jacoco'
apply from: 'coverage.gradle'

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacocoReportDir")
}

def pagesUnitTestsCoverage
ext {
    pagesUnitTestsCoverage = includes
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*'
            ]

            def javaClasses = fileTree(dir: "${variant.javaCompiler.destinationDir}/com/hb/pages", excludes: excludes, includes: pagesUnitTestsCoverage)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}/com/hb/pages", excludes: excludes, includes: pagesUnitTestsCoverage)
            getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

            getSourceDirectories().setFrom(files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ]))

            getExecutionData().setFrom(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
        }
    }
}